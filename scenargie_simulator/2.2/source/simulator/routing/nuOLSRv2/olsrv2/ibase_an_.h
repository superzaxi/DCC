//
// This file is automatically generated from tempalte/ibase.h
//

namespace NuOLSRv2Port { //ScenSim-Port://

/************************************************************//**
 * @addtogroup ibase_an
 * @{
 */

/** Current ibase_an. */
#define IBASE_AN    (&OLSR->ibase_an)

////////////////////////////////////////////////////////////////
//
// Iterator
//

/** Gets iterator.
 *
 * @return iterator which points the first tuple
 */
#define  ibase_an_iter() \
    ((tuple_an_t*)(tuple_an_t*)IBASE_AN->next)

/** Checks whether iterator points end of the ibase.
 *
 * @param iter
 * @return true if iter points to the end of ibase
 */
#define ibase_an_iter_is_end(iter) \
    ((nu_bool_t)((void*)(iter) == (void*)IBASE_AN))

/** Gets next iterator.
 *
 * @param iter
 * @return iterator which points the next tuple
 */
#define ibase_an_iter_next(iter) \
    ((tuple_an_t*)(tuple_an_t*)(iter)->next)

/** Gets the pointer which points end of the ibase.
 *
 * @return iterator which points the end of the ibase
 */
#define ibase_an_iter_end()    ((tuple_an_t*)IBASE_AN)

/** Traverses ibase.
 *
 * @param p
 */

/** Traverses the ibase.
 *
 * @param p
 */
#define FOREACH_AN(p)                     \
    for (tuple_an_t* p = ibase_an_iter(); \
         !ibase_an_iter_is_end(p);        \
         p = ibase_an_iter_next(p))

/** Sets timeout to the tuple.
 *
 * @param tuple
 * @param t
 */
#define tuple_an_set_timeout(tuple, t)             \
    tuple_time_set_timeout((tuple_time_t*)(tuple), \
        &(OLSR)->ibase_an_time_list, (t))

////////////////////////////////////////////////////////////////
//
// Information Base
//

/** Clears the change flag.
 */
#define ibase_an_clear_change_flag() \
    do { IBASE_AN->change = false; } \
    while (0)

/** Checks whether the ibase has been changed.
 */
#define ibase_an_is_changed() \
    ((nu_bool_t)(IBASE_AN->change))

/** Sets the change flag of the ibase.
 */
#define ibase_an_change()           \
    do { IBASE_AN->change = true; } \
    while (0)

/** Checks whether the ibase is empty.
 *
 * @return true if the ibase is empty
 */
#define ibase_an_is_empty()    ((void*)(IBASE_AN) == (void*)IBASE_AN->next)

/** Gets the size of the ibase.
 *
 * @return the size of the ibase
 */
#define ibase_an_size()        ((IBASE_AN)->n)

/** Gets the top tuple of the ibase.
 *
 * @return the top tuple of the ibase
 */
#define ibase_an_head()        ((ibase_an_is_empty()) ? NULL : (IBASE_AN)->next)

/** @} */

}//namespace// //ScenSim-Port://
